// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  cpf                  String        @unique
  email                String        @unique
  name                 String
  password             String
  passwordResetToken   String?
  passwordResetExpires DateTime?
  role                 enumUserRoles @default(client)

  hashCpf   String? @unique
  hashEmail String? @unique
  secretId  String? @unique

  usageTermsAccepted UserUsageTermsAccepted[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestCreatedBy  Request[] @relation(name: "createdBy")
  requestFinishedBy Request[] @relation(name: "finishedBy")
}

type UserUsageTermsAccepted {
  usageTermsId            String
  usageTermsAcceptedAt    DateTime
  usageTermsAcceptedItens String[]
}

model Request {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  identifier          Int
  image               String
  address             Address
  description         String
  status              enumStatusRequest     @default(opened)
  type                enumComumTypeRequest?
  finishedImage       String?
  finishedDescription String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  finishedAt          DateTime?

  createdByUser User?   @relation(name: "createdBy", fields: [createdBy], references: [id])
  createdBy     String? @db.ObjectId

  finishedByUser User?   @relation(name: "finishedBy", fields: [finishedBy], references: [id])
  finishedBy     String? @db.ObjectId
}

model usageTerms {
  id      String            @id @default(auto()) @map("_id") @db.ObjectId
  version Int               @unique
  itens   UsageTermsItens[]

  createdAt DateTime @default(now())
  createdBy String?  @db.ObjectId
}

type UsageTermsItens {
  id         String   @default(uuid())
  title      String
  paragraphs String[]
}

type Address {
  lat              String
  long             String
  city             String
  state            String
  formattedAddress String
  street           String?
  zipcode          String?
  neighborhood     String?
  number           Int?
}

enum enumUserRoles {
  admin
  client
  technical
}

enum enumComumTypeRequest {
  outros                            @map("Outros")
  aguaPotavel_abastecimento         @map("Agua Potável/Abastecimento")
  alambrado_manutencao              @map("Alambrado/Manutenção")
  APP                               @map("Área de Preservação Permanente")
  arvore                            @map("Árvore")
  corteDeRaiz                       @map("Corte de raiz")
  limpezaAposPoda                   @map("Limpeza após poda")
  poda                              @map("Poda")
  queda                             @map("Queda")
  quedaDeGalhos                     @map("Queda de galhos")
  requadroDeCalcada                 @map("Requadro de calçada")
  ciclovia_manutencao               @map("Ciclovia/manutenção")
  drenagemDiversos                  @map("Drenagem/diversos")
  fundoDoVale_capinaMargensCorregos @map("Fundo do Vale/Capina margens córregos")
  guias_manutencaoEPintura          @map("Guias/manutenção e pintura")
  limpeza_coletaNoGramado_raspagem  @map("Limpeza/coleta no gramado/Raspagem")
  lixeira_areasRurais               @map("Lixeiras/áreas rurais")
  logradourosPublicos               @map("Logradouros públicos")
  capina_rocada                     @map("Capina/Roçada")
  entulhoEmAreaPublica              @map("Entulho em área pública")
  placaDeProibicao                  @map("Placa de proibição")
  mureta_manutencao_remocao         @map("Mureta/manutenção/remoção")
  passarelasDeMadeira_manutencao    @map("Passarelas de madeira/Manutenção")
  passeio_recomposicao              @map("Passeio/recomposição")
  pistaDeCaminhada_manutencao       @map("Pista de caminhada/manutenção")
}

enum enumStatusRequest {
  opened
  closed
}
