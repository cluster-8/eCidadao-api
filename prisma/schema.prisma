// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String        @id @default(auto()) @map("_id") @db.ObjectId
  cpf                  String        @unique
  email                String        @unique
  name                 String
  phone                String?
  password             String
  passwordResetToken   String?
  passwordResetExpires DateTime?
  role                 enumUserRoles @default(client)

  usageTermsAcceptedAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestCreatedBy  Request[] @relation(name: "createdBy")
  requestFinishedBy Request[] @relation(name: "finishedBy")
}

model Request {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  identifier          Int
  image               String
  address             Address
  description         String
  status              enumStatusRequest     @default(opened)
  type                enumComumTypeRequest?
  finishedImage       String?
  finishedDescription String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime?             @updatedAt
  finishedAt          DateTime?

  createdByUser User?   @relation(name: "createdBy", fields: [createdBy], references: [id])
  createdBy     String? @db.ObjectId

  finishedByUser User?   @relation(name: "finishedBy", fields: [finishedBy], references: [id])
  finishedBy     String? @db.ObjectId
}

type Address {
  lat             String
  long            String
  city            String
  state           String
  formattedAdress String
  street          String?
  zipcode         String?
  neighborhood    String?
  number          Int?
}

enum enumUserRoles {
  admin
  client
  technical
}

enum enumComumTypeRequest {
  arvoreCaindo
  posteCaindo
  burraco
}

enum enumStatusRequest {
  opened
  closed
}
